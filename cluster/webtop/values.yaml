replicaCount: 1

image:
  repository: registry.b-rad.dev:443/webtop-ubuntu-kde
  pullPolicy: IfNotPresent
  tag: "20250921-201649"

env:
  - name: PUID
    value: "1001"
  - name: PGID
    value: "1001"
  - name: TZ
    value: "America/Los_Angeles"
  - name: SUBFOLDER
    value: "/"
  - name: TITLE
    value: "Desktop"
  - name: LC_ALL
    value: "en_US.UTF-8"
  - name: LC_ALL
    value: "en_US.UTF-8"
  - name: DOCKER_HOST
    value: "tcp://localhost:2376"
  - name: DOCKER_TLS_VERIFY
    value: "1"
  - name: DOCKER_CERT_PATH
    value: "/certs/client"

imagePullSecrets:
  - name: registry-credentials
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}

securityContext: {}

runtimeClassName: nvidia

service:
  type: ClusterIP
  port: 3000

ingress:
  enabled: true
  className: nginx
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-production"
    nginx.ingress.kubernetes.io/auth-url: https://login.b-rad.dev/authorize
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/websocket-services: "webtop"
    nginx.ingress.kubernetes.io/upgrade: "websocket"
  hosts:
    - host: desktop.b-rad.dev
      paths:
        - path: /
          pathType: Prefix
  tls:
    - hosts:
        - desktop.b-rad.dev

resources: {}

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

persistentVolume:
  enabled: true
  accessModes:
    - ReadWriteOnce
  annotations: {}
  size: 5Gi #not really respected when using NFS...which I am
  storageClass: nfs-csi

volumes:
  - name: user-data
    persistentVolumeClaim:
      claimName: webtop
  - name: docker-certs
    emptyDir: {}

volumeMounts:
  - name: user-data
    mountPath: /config
  - name: docker-certs
    mountPath: /certs/client
    subPath: client

nodeSelector: {}

tolerations: []

affinity: {}
